{"version":3,"sources":["lib/hooks/useFetch.js","pages/display-app/components.js"],"names":["UseFetch","initialUrl","useState","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","console","log","useEffect","fetch","then","response","json","catch","i18n","init","WidgetWrapper","styled","div","IconDiv","props","open","WidgetContainer","Flex","ModalBackground","SearchContainer","width","left","top","SettingsDiv","WidgetList","React","memo","widgetList","widgetData","map","Widget","i","settings","currentSetting","SettingsDialog","widgetIndex","widgetSetting","onUpdate","inputFields","useRef","timezones","inputRef","fieldInit","setFieldInit","Object","keys","forEach","f","current","fieldTypeCheck","s","indexOf","type","push","moment","tz","names","timezone","text","format","offset","utcOffset","useFormFields","fields","handleChange","length","tzOffset","value","target","id","m","textStyle","textAlign","mt","title","ml","mr","setting","Fragment","placeholder","label","mb","name","defaultValue","onChange","ref","size","t","ii","onClick","e","hasOwnProperty","SearchBox","forwardRef","showHistory","chevronOpen","searchKey","searchOpen","saveSearchKey","search","searchRef","LeftIcon","iconify","bxSearchAlt2","color","InputField","autoFocus","__","onKeyDown","key","display","prevState","RightIcon","bxChevronUp","bxChevronDown","SearchResults","searchBox","roleKey","saveSearchResult","boxRect","getBoundingClientRect","containerProps","height","content","setContent","useFetch","GOOGLE_URL","SEARCH_ENGINE","encodeURIComponent","API_KEY","items","item","href","link","data-link","itemIndex","parseInt","currentTarget","dataset","style","fontSize","snippet","SearchHistory","searchHistory"],"mappings":"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","file":"static/js/11.e5542747.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst UseFetch = initialUrl => {\n  // create state variables\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const [url, setUrl] = useState(initialUrl);\n  console.log(\"FETCH \", url);\n\n  useEffect(() => {\n    if (!url) return;\n    setIsLoading(true);\n    // clear old search\n    setData(null);\n    setError(null);\n\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        //console.log(\"FETCH \", data);\n        setIsLoading(false);\n        setData(data);\n      })\n      .catch(error => {\n        setIsLoading(false);\n        setError(error);\n      });\n  }, [url]);\n\n  return { data, error, isLoading, setUrl };\n};\n\nexport default UseFetch;\n","/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/no-multi-comp */\n/* eslint-disable react/display-name */\n\nimport React, { useRef, forwardRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  Box,\n  Flex,\n  Text,\n  Input,\n  Button,\n  Divider,\n  IconField,\n  Label,\n  Select,\n} from \"@blend-ui/core\";\nimport { useFormFields } from \"../../lib/formFields\";\nimport bxSearchAlt2 from \"@iconify/icons-bx/bx-search-alt-2\";\nimport bxChevronUp from \"@iconify/icons-bx/bx-chevron-up\";\nimport bxChevronDown from \"@iconify/icons-bx/bx-chevron-down\";\n\nimport useFetch from \"../../lib/hooks/useFetch\";\nimport { API_KEY, GOOGLE_URL, SEARCH_ENGINE } from \"../../config\";\n\nimport i18n from \"../../lib/i18n\";\n\nimport moment from \"moment\";\nimport \"moment-timezone\";\nimport PropTypes from \"prop-types\";\n\ni18n.init();\n\nexport const WidgetWrapper = styled.div`\n  margin: 10px;\n  border: 2px outset;\n  border-radius: 8px;\n  min-height: 200px;\n  min-width: 200px;\n`;\nexport const IconDiv = styled.div`\n  height: 24px;\n  position: relative;\n  left: 197px;\n  top: 23px;\n  opacity: 0;\n  cursor: ${props => (props.open ? \"default\" : \"pointer\")};\n  &:hover {\n    opacity: ${props => (props.open ? 0 : 1)};\n  }\n`;\nexport const WidgetContainer = styled(Flex)`\n  /*\nwidth: 100%;\nheight: 100vh;\ndisplay: flex;\n*/\n  flex-wrap: wrap;\n  flex-direction: row;\n  align-content: flex-start;\n  justify-content: flex-start;\n  position: relative;\n  top: 0px;\n  left: 0px;\n  overflow-y: auto;\n`;\nexport const ModalBackground = styled.div`\n  width: 100%;\n  height: 100vh;\n  z-index: 5;\n  background-color: rgba(30, 29, 29, 0.3);\n  position: absolute;\n  left: 0;\n  top: 0;\n`;\n/*\nexport const SearchModal = styled.div`\nwidth: 100%;\nheight: 100vh;\nz-index: 15;\nbackground-color: rgba(30, 29, 29, 0.3);\nposition: absolute;\nleft: 0;\ntop: 0;\n`;\n*/\nexport const SearchContainer = styled.div`\n  width: ${props => props.width}px;\n  /* height: 100vh; */\n  max-height: 400px;\n  overflow-y: auto;\n  z-index: 20;\n  background-color: white;\n  position: absolute;\n  left: ${props => props.left}px;\n  top: ${props => props.top}px;\n  padding-top: 10px;\n  padding-left: 10px;\n  padding-right: 10px;\n`;\nexport const SettingsDiv = styled.div`\n  background-color: white;\n\n  width: 100%;\n  height: 100%;\n  border: 2px outset;\n  border-radius: 8px;\n  z-index: 10;\n`;\n\nexport const WidgetList = React.memo(({ widgetList, widgetData }) => {\n  // currentUser\n  // localization\n  // settings\n  console.log(\"WIDGET LIST \", widgetList);\n  console.log(\"WIDGET DATA\", widgetData);\n  return (\n    <>\n      {widgetList.map((Widget, i) => {\n        return (\n          <Widget\n            data={{ settings: widgetData[i].currentSetting }}\n            key={\"prifina-widget-\" + i}\n          />\n        );\n      })}\n    </>\n  );\n});\n\nWidgetList.propTypes = {\n  widgetList: PropTypes.array.isRequired,\n  widgetData: PropTypes.array.isRequired,\n};\n\n//moment.tz.guess()\n//console.log(\"MOMENT \", moment.tz.names());\n/*\n  var select = document.getElementById('timezones');\nmoment.tz.names().forEach(function(timezone){\n\tvar option = document.createElement('option');\n  option.textContent = timezone + ': ' + moment.tz(timezone).format('Z');\n  select.appendChild(option);\n});\n*/\n/*\nmoment.tz.names().forEach(function (timezone) {\n  //console.log(moment.tz(timezone).utcOffset());\n});\n*/\n//console.log(moment.tz.names());\n/*\n<Label htmlFor=\"cabinClass\">Cabin Class</Label>\n<Select\n  id=\"cabinClass\"\n  name=\"cabinClass\"\n  defaultValue=\"Premium Economy\"\n  onChange={changeAction}\n>\n  <option>Economy</option>\n  <option>Premium Economy</option>\n  <option>Business</option>\n  <option>First Class</option>\n  <option>\n    With a super long label that doesn't get clobbered by the chevron\n  </option>\n</Select>\n*/\n\nexport const SettingsDialog = ({\n  widgetIndex,\n  widgetSetting,\n  onUpdate,\n  ...props\n}) => {\n  //const currentSettings = widgetSettings[widget];\n  console.log(\"SETTINGS \", widgetIndex, widgetSetting);\n  let inputFields = useRef({});\n  let timezones = useRef([]);\n  const inputRef = useRef();\n  const [fieldInit, setFieldInit] = useState(false);\n  useEffect(() => {\n    Object.keys(widgetSetting.currentSetting).forEach(f => {\n      inputFields.current[f] = widgetSetting.currentSetting[f];\n    });\n    console.log(\"FLDS \", inputFields);\n    console.log(\"DIALOG \", props);\n    let fieldTypeCheck = [];\n    widgetSetting.settings.forEach(s => {\n      console.log(s);\n      if (fieldTypeCheck.indexOf(s.type) === -1) fieldTypeCheck.push(s.type);\n    });\n    //console.log(fieldTypeCheck);\n\n    // have timezone field type...\n    if (fieldTypeCheck.indexOf(\"TZ\") > -1) {\n      moment.tz.names().forEach(function (timezone) {\n        timezones.current.push({\n          text: timezone + \": \" + moment.tz(timezone).format(\"Z\"),\n          tz: timezone,\n          offset: moment.tz(timezone).utcOffset(),\n        });\n      });\n    }\n    setFieldInit(true);\n  }, []);\n  //console.log(timezones);\n\n  const [fields, handleChange] = useFormFields(inputFields.current);\n\n  console.log(\"RENDER FIELDS \", fields, inputFields);\n\n  if (timezones.current.length > 0) {\n    const tzOffset = moment.tz(fields.tz).utcOffset();\n    console.log(\"TZ \", inputFields, tzOffset);\n    if (tzOffset !== inputFields.current.offset) {\n      inputFields.current.offset = tzOffset;\n      inputFields.current.tz = fields.tz;\n      console.log(\"INPUT \", inputRef);\n      if (inputRef.current) {\n        inputRef.current.value = tzOffset;\n      }\n\n      handleChange({\n        target: {\n          id: \"offset\",\n          value: tzOffset,\n        },\n      });\n    }\n  }\n\n  return (\n    <Box m={2}>\n      <Text textStyle={\"h3\"} textAlign={\"center\"} mt={10}>\n        {widgetSetting.title}\n      </Text>\n      <Divider />\n      {fieldInit && (\n        <Box mt={10} ml={5} mr={5}>\n          {widgetSetting.settings.map((setting, i) => {\n            return (\n              <React.Fragment key={\"settings-\" + i}>\n                {setting.type === \"text\" && (\n                  <Input\n                    mt={15}\n                    key={\"widget-setting-\" + i}\n                    placeholder={setting.label}\n                    mb={2}\n                    id={setting.value}\n                    name={setting.value}\n                    defaultValue={fields[setting.value]}\n                    onChange={handleChange}\n                    ref={inputRef}\n                  />\n                )}\n                {setting.type === \"TZ\" && (\n                  <>\n                    <Label key={\"setting-label-\" + i} mt={10}>\n                      {setting.label}\n                    </Label>\n                    <Select\n                      mb={10}\n                      size={\"sm\"}\n                      key={\"widget-setting-\" + i}\n                      id={setting.value}\n                      name={setting.value}\n                      defaultValue={fields[setting.value]}\n                      onChange={handleChange}\n                    >\n                      {timezones.current.map((t, ii) => {\n                        return (\n                          <option\n                            key={\"widget-setting-\" + i + \"-\" + ii}\n                            value={t.tz}\n                          >\n                            {t.text}\n                          </option>\n                        );\n                      })}\n                    </Select>\n                  </>\n                )}\n              </React.Fragment>\n            );\n          })}\n          <Box mt={10}>\n            <Button\n              width={\"100%\"}\n              onClick={e => {\n                console.log(\"UPDATE BUTTON \", fields);\n                //console.log(fields);\n                if (timezones.length > 0 && fields.hasOwnProperty(\"tz\")) {\n                  onUpdate({\n                    tz: fields.tz,\n                    offset: moment.tz(fields.tz).utcOffset(),\n                  });\n                } else {\n                  onUpdate(fields);\n                }\n                //console.log(\"UPDATE CLICK \", e.target.className);\n                //onUpdate(fields);\n              }}\n            >\n              Update\n            </Button>\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nSettingsDialog.propTypes = {\n  widgetIndex: PropTypes.number.isRequired,\n  widgetSetting: PropTypes.object.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n};\n\nexport const SearchBox = forwardRef(\n  ({ showHistory, chevronOpen, searchKey, searchOpen, saveSearchKey }, ref) => {\n    const [fields, handleChange] = useFormFields({\n      search: \"\",\n    });\n    const searchRef = useRef();\n    return (\n      <Box ml={10} mr={10} ref={ref}>\n        <IconField>\n          <IconField.LeftIcon\n            iconify={bxSearchAlt2}\n            color={\"componentPrimary\"}\n            size={\"17\"}\n          />\n          <IconField.InputField\n            ref={searchRef}\n            autoFocus={true}\n            placeholder={i18n.__(\"Search\")}\n            id={\"search\"}\n            name={\"search\"}\n            onChange={handleChange}\n            onKeyDown={e => {\n              if (e.key === \"Enter\") {\n                //console.log(\"SEARCH ....\", fields.search);\n                saveSearchKey(fields.search);\n                searchKey(fields.search);\n              }\n            }}\n          />\n          <Box\n            display={\"inline-flex\"}\n            onClick={() => {\n              if (!searchOpen) {\n                showHistory(prevState => !prevState);\n              }\n              searchRef.current.value = \"\";\n              searchKey(\"\");\n            }}\n          >\n            <IconField.RightIcon\n              iconify={chevronOpen || searchOpen ? bxChevronUp : bxChevronDown}\n              color={\"componentPrimary\"}\n              size={\"17\"}\n            />\n          </Box>\n        </IconField>\n      </Box>\n    );\n  },\n);\nSearchBox.propTypes = {\n  showHistory: PropTypes.func.isRequired,\n  chevronOpen: PropTypes.bool.isRequired,\n  searchKey: PropTypes.func.isRequired,\n  searchOpen: PropTypes.bool,\n  saveSearchKey: PropTypes.func.isRequired,\n};\n\nexport const SearchResults = props => {\n  const { searchBox, searchKey, roleKey, saveSearchResult } = props;\n  //console.log(searchBox);\n  //console.log(searchBox.current.getBoundingClientRect());\n  const boxRect = searchBox.current.getBoundingClientRect();\n  const containerProps = {\n    width: boxRect.width,\n    left: boxRect.left,\n    top: boxRect.top + boxRect.height + 5,\n  };\n  console.log(containerProps);\n\n  console.log(\"NEW SEARCH \", searchKey);\n  const [content, setContent] = useState(null);\n  const { data, error, isLoading, setUrl } = useFetch();\n  /*\n  setUrl(\n    `${GOOGLE_URL}?cx=${SEARCH_ENGINE}&exactTerms=${\n      roleKey.length > 0 ? encodeURIComponent(roleKey) : \"\"\n    }&q=${encodeURIComponent(searchKey)}&lr=lang_en&key=${API_KEY}`,\n  );\n*/\n  //let searchHistory = [];\n  /*\n  let searchHistory = JSON.parse(localStorage.getItem(\"searchHistory\"));\n  if (searchHistory === null) {\n    searchHistory = [];\n  } else {\n    searchHistory.unshift({ search: searchKey });\n  }\n  localStorage.setItem(\"searchHistory\", JSON.stringify(searchHistory));\n*/\n  useEffect(() => {\n    if (!isLoading)\n      setUrl(\n        `${GOOGLE_URL}?cx=${SEARCH_ENGINE}&exactTerms=${\n          roleKey.length > 0 ? encodeURIComponent(roleKey) : \"\"\n        }&q=${encodeURIComponent(searchKey)}&lr=lang_en&key=${API_KEY}`,\n      );\n    if (error) setContent(<h2>Error when fetching: {error}</h2>);\n    if (!data && isLoading) setContent(<h2>LOADING...</h2>);\n    if (!data && !isLoading) setContent(null);\n    if (data) {\n      //console.log(Object.keys(data));\n      console.log(data);\n      const items = data.items.map((item, i) => {\n        return (\n          <li key={\"search-result-\" + i}>\n            <div>\n              <a\n                href={item.link}\n                data-link={i}\n                onClick={e => {\n                  const itemIndex = parseInt(e.currentTarget.dataset[\"link\"]);\n                  console.log(\"LINK CLICK \", data.items[itemIndex]);\n                  saveSearchResult(searchKey, data.items[itemIndex]);\n                }}\n                target={\"_blank\"}\n              >\n                {item.title}\n              </a>\n            </div>\n            <div style={{ fontSize: \"0.75rem\" }}>{item.snippet}</div>\n          </li>\n        );\n      });\n      setContent(<ol>{items}</ol>);\n    }\n  }, [searchKey, error, isLoading, data]);\n  /*\n  const getContent = newSearch => {\n    if (error) return <h2>Error when fetching: {error}</h2>;\n    if (!data && isLoading) return <h2>LOADING...</h2>;\n    if (!data) return null;\n    console.log(Object.keys(data));\n    console.log(data);\n    console.log(\"NEW SEARCH2 \", searchKey);\n    console.log(\"NEW SEARCH3 \", newSearch);\n    console.log(\"NEW SEARCH4 \", prevSearchKey);\n\n    prevSearchKey.current = newSearch;\n    return (\n      <ol>\n        {data.items.map((item, i) => {\n          return (\n            <li key={\"search-result-\" + i}>\n              <div>\n                <a href={item.link} target={\"_blank\"}>\n                  {item.title}\n                </a>\n              </div>\n              <div style={{ fontSize: \"0.75rem\" }}>{item.snippet}</div>\n            </li>\n          );\n        })}\n      </ol>\n    );\n  };\n*/\n\n  return (\n    <>\n      <SearchContainer {...containerProps}>\n        <Text textStyle={\"h4\"}>Search results</Text>\n        <Divider />\n        {content}\n      </SearchContainer>\n    </>\n  );\n};\nSearchResults.propTypes = {\n  searchBox: PropTypes.object.isRequired,\n  searchKey: PropTypes.string,\n  roleKey: PropTypes.string,\n  saveSearchResult: PropTypes.func.isRequired,\n};\n\nexport const SearchHistory = props => {\n  const { searchBox } = props;\n  console.log(\"HISTORY \", searchBox);\n  //console.log(searchBox.current.getBoundingClientRect());\n  const boxRect = searchBox.current.getBoundingClientRect();\n  const containerProps = {\n    width: boxRect.width,\n    left: boxRect.left,\n    top: boxRect.top + boxRect.height + 5,\n  };\n  console.log(containerProps);\n  let searchHistory = [];\n  /*\n  let searchHistory = JSON.parse(localStorage.getItem(\"searchHistory\"));\n  if (searchHistory === null) {\n    searchHistory = [{ search: \"Testing...\" }];\n  }\n*/\n  /*\n    localStorage.setItem(\n      \"WidgetImage\",\n      JSON.stringify({ image: res.target.result })\n    );\n    */\n\n  return (\n    <>\n      <SearchContainer {...containerProps}>\n        <Text textStyle={\"h4\"}>Search history</Text>\n        <Divider />\n        <ol>\n          {searchHistory.length > 0 &&\n            searchHistory.map((item, i) => {\n              return <li key={\"search-\" + i}>{item.search}</li>;\n            })}\n        </ol>\n      </SearchContainer>\n    </>\n  );\n};\n\nSearchHistory.propTypes = {\n  searchBox: PropTypes.object.isRequired,\n};\n"],"sourceRoot":""}